import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.concurrent.LinkedBlockingQueue;

public class motorControllerSimulator implements Runnable {

    private LinkedBlockingQueue queue;

    DatagramSocket client_socket;
    InetAddress IPAddress;

    public motorControllerSimulator(LinkedBlockingQueue queue) {
        this.queue = queue;

        try {
            client_socket = new DatagramSocket(2362);
            IPAddress = InetAddress.getByName("10.0.1.193");
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

    @Override
    public void run() {
        byte[] writeBuf;

        while (true) {
            try {
                writeBuf = (byte[])queue.take();
                DatagramPacket send_packet = new DatagramPacket(writeBuf,writeBuf.length, IPAddress, 2362);
                client_socket.send(send_packet);
            } catch (InterruptedException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private String bufferToHexString(byte[] data, int start, int length) {
        int i;
        int myStop;
        StringBuilder sb = new StringBuilder();
        //byte [] subArray = Arrays.copyOfRange(a, 4, 6);
        myStop = (length > data.length) ? data.length : length;
        for (i=start; i<start+myStop; i++) {
            sb.append(String.format("%02x ", data[i]));
        }
        return sb.toString();
    }
	
}
