// Copyright 2006-2015 Coppelia Robotics GmbH. All rights reserved. 
// marc@coppeliarobotics.com
// www.coppeliarobotics.com
// 
// -------------------------------------------------------------------
// THIS FILE IS DISTRIBUTED "AS IS", WITHOUT ANY EXPRESS OR IMPLIED
// WARRANTY. THE USER WILL USE IT AT HIS/HER OWN RISK. THE ORIGINAL
// AUTHORS AND COPPELIA ROBOTICS GMBH WILL NOT BE LIABLE FOR DATA LOSS,
// DAMAGES, LOSS OF PROFITS OR ANY OTHER KIND OF LOSS WHILE USING OR
// MISUSING THIS SOFTWARE.
// 
// You are free to use/modify/distribute this file for whatever purpose!
// -------------------------------------------------------------------
//
// This file was automatically created for V-REP release V3.2.1 on May 3rd 2015

import coppelia.IntW;
import coppelia.IntWA;
import coppelia.remoteApi;

// Make sure to have the server side running in V-REP: 
// in a child script of a V-REP scene, add following command
// to be executed just once, at simulation start:
//
// simExtRemoteApiStart(19999)
//
// then start simulation, and run this program.
//
// IMPORTANT: for each successful call to simxStart, there
// should be a corresponding call to simxFinish at the end!


public class motorController
{
	long mStartTime;
	IntWA mObjectHandles;
	IntW mLeftMotor;
	IntW mRightMotor;
	int mClientID;
	remoteApi mVrep;
	
	private boolean init() {
		
		mVrep = new remoteApi();
		mVrep.simxFinish(-1); // just in case, close all opened connections
		mClientID = mVrep.simxStart("127.0.0.1",5000,true,true,5000,5);
		if (mClientID!=-1)
		{
			System.out.println("Connected to remote API server");	

			IntWA mObjectHandles = new IntWA(1);
			IntW mLeftMotor = new IntW(1);
			IntW mRightMotor = new IntW(1);
			
			int ret=mVrep.simxGetObjects(mClientID,remoteApi.sim_handle_all,mObjectHandles,mVrep.simx_opmode_oneshot_wait);
			if (ret==remoteApi.simx_return_ok)
				System.out.format("Number of objects in the scene: %d\n",mObjectHandles.getArray().length);
			else
				System.out.format("Remote API function call returned with error code: %d\n",ret);
				
			try
			{
				Thread.sleep(2000);
			}
			catch(InterruptedException ex)
			{
				Thread.currentThread().interrupt();
			}
	
			mVrep.simxGetObjectHandle(mClientID,"remoteApiControlledBubbleRobLeftMotor",mLeftMotor,mVrep.simx_opmode_oneshot_wait);
			mVrep.simxGetObjectHandle(mClientID,"remoteApiControlledBubbleRobRightMotor",mRightMotor,mVrep.simx_opmode_oneshot_wait);
			System.out.println("Left = " + mLeftMotor.getValue() + " Right = " + mRightMotor.getValue());
			
			mStartTime=System.currentTimeMillis();
			return true;
			
		} else {
			System.out.println("Failed connecting to remote API server");
			return true;
		}
		
	}
	
	public static void main(String[] args)
	{
		boolean done=false;
		
		System.out.println("Program started");
					
		init();
		
		while (!done)
		{
			mVrep.simxSetJointTargetVelocity(mClientID,mLeftMotor.getValue(),(float)3.14,mVrep.simx_opmode_oneshot);
			mVrep.simxSetJointTargetVelocity(mClientID,mRightMotor.getValue(),(float)3.14,mVrep.simx_opmode_oneshot);
		}
		
		// Before closing the connection to V-REP, make sure that the last command sent out had time to arrive. You can guarantee this with (for example):
		IntW pingTime = new IntW(0);
		mVrep.simxGetPingTime(mClientID,pingTime);

		// Now close the connection to V-REP:	
		mVrep.simxFinish(mClientID);
		
		System.out.println("Program ended");
	}
}
			
